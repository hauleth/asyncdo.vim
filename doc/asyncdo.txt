*asyncdo.txt* Minimal async runner for Vim 8 and NeoVim

Author:  Hauleth <lukasz@niemier.pl>
Repo:    https://github.com/hauleth/asyncdo.vim
License: MIT <https://opensource.org/licenses/MIT>

INTRODUCTION                                    *asyncdo*

Simplest usable async runner for Vim and NeoVim. The reason for creating this
was that I needed something absurdly simple: run task in the background and
then populate |quickfix| window with result of such task (mostly running tests
in background).

FUNCTIONS                                       *asyncdo-functions*

asyncdo#run({nojump}, {cmd}, {args} ...)        *asyncdo#run()*
                {cmd} can either be a string command to run, or a dictionary
                containing a "job" entry. When {cmd} is a dictionary, it can
                contain the following entries, all optional except for "job":

                    job          the command to run in the background
                    errorformat  errorformat to apply to the output of "job"
                    title        quickfix title to apply

                Run {cmd} (or {cmd}.job) in the background and populate
                |quicklist|. {args} are argument list appended to {cmd} or
                replace $* pattern found in {cmd}. Example: >
                       call asyncdo#run(0, "make", "test")
                       call asyncdo#run(1,
                          \ {'job': &grepprg, 'errorformat': &grepformat},
                          \ "test")
<                {nojump} decides whether this should jump to first result.

                Current process definition is stored in |g:asyncdo_job| and
                trying to call |asyncdo#run| while that variable is present
                will result in error.

                Also see |:AsyncDo| and |g:asyncdo_job|

asyncdo#stop()                                 *asyncdo#stop()*
                Stop job started by |asyncdo#run()|.

                Also see |:AsyncStop|

asyncdo#lrun({nojump}, {cmd}, {args} ...)       *asyncdo#lrun()*
                The same as |asyncdo#run()| but populates |location-list| and
                uses |w:asyncdo_job| instead.

                Also see |:LAsyncDo| and |w:asyncdo_job|
asyncdo#lstop()                                *asyncdo#lstop()*

                Stop job started by |asyncdo#lrun()|.

                Also see |:LAsyncStop|

COMMANDS                                       *asyncdo-commands*

                                               *:AsyncDo*
:AsyncDo[!] {cmd}      Run task in the background redirecting output to
                       temporary file that is loaded using |:cgetfile| after
                       task finishes.

                       This will not allow you to run 2 commands
                       simultaneously and will return with error message if
                       you try so.

                                               *:AsyncStop*
:AsyncStop             Stop currently running job using |job_stop()| or
                       |jobstop()| depending on your Vim implementation.

                                               *:LAsyncDo*
:LAsyncDo[!] {cmd}     Same as |:AsyncDo| but populates |location-list|. Also
                       can be ran once per window, not once globally.

                                               *:LAsyncStop*
:LAsyncStop            Same as |:AsyncStop| but stops job running for current
                       window instead of global.

VARIABLES                                      *asyncdo-variables*

                                               *g:asyncdo* *w:asyncdo*
Struct containing details about currently running job:

    id   - job ID
    cmd  - running command
    nr   - window that launched the job, used when populating |location-list|
    file - temporary file that contain output of the running command
    jump - whether jump or not to firs result after job finish


INTEGRATIONS                                   *asyncdo-integrations*

                                               *asyncdo-integrations-statusline*
statusline ~

To display status of |:AsyncDo| in your statusline just check for existence of
|g:asyncdo_job|
>
    let &statusline .= "%{exists('g:asyncdo')?'running':''}"
<

                                               *asyncdo-integrations-qf*
qf ~

|QuickFixCmdPost| is fired after job is finished, so auto opening
|quickfix-window| on finish is supported.

                                               *asyncdo-integrations-dispatch*
                                               *asyncdo-integrations-fugitive*
                                               *asyncdo-integrations-make*
Dispatch ~

There is no collision between these two plugins, however for plugins using
dispatch plugin for async work (like Fugitive) you can add this in your |vimrc|
to use |:AsyncDo| instead:
>
    command! -bang -nargs=* -complete=file Make call asyncdo#run(<bang>0, &makeprg, expandcmd(<q-args>))
<

                                               *asyncdo-integrations-grep*
Async grep ~

Making |:grep| to run asynchronously is also quite trivial with:

>
    command! -bang -nargs=* -complete=dir Grep call asyncdo#run(
                \ <bang>0,
                \ { 'job': &grepprg, 'errorformat': &grepformat },
                \ <f-args>)
<

 vim:tw=78:et:ft=help:norl:
